@startuml Diagrama_Arquitectura_Software

!theme plain
skinparam linetype ortho
skinparam component {
    BackgroundColor #FFFFFF
    BorderColor #2C3E50
    BorderThickness 2
    ArrowColor #34495E
    ArrowThickness 2
    FontColor #2C3E50
    FontSize 11
}
skinparam package {
    BackgroundColor #ECF0F1
    BorderColor #3498DB
    BorderThickness 2
    FontColor #2C3E50
    FontSize 14
    FontStyle bold
}
skinparam database {
    BackgroundColor #F8F9FA
    BorderColor #E74C3C
    BorderThickness 2
}
skinparam cloud {
    BackgroundColor #E8F8F5
    BorderColor #27AE60
    BorderThickness 2
}

title **Arquitectura de Software - Sistema de Control Arduino IR**\n**Patr√≥n: Arquitectura por Capas + MVC**

' ===== CAPA DE PRESENTACI√ìN =====
package "üé® **CAPA DE PRESENTACI√ìN**" as PresentationLayer {
    component "pantallainicial1" as GUI1 <<Swing Panel>> {
        [Interfaz Principal]
        [Navegaci√≥n]
        [Temas Visuales]
    }
    
    component "Pantalla2" as GUI2 <<Display Panel>> {
        [Visualizaci√≥n IR]
        [Feedback Visual]
        [Animaciones]
    }
    
    component "MenuComando" as GUI3 <<Modal Dialog>> {
        [Men√∫ Opciones]
        [Historial]
        [Configuraci√≥n]
    }
    
    note right of GUI1 : "**Vista (View)**\n‚Ä¢ Manejo de eventos UI\n‚Ä¢ Renderizado de componentes\n‚Ä¢ Estilos y temas"
}

' ===== CAPA DE L√ìGICA DE NEGOCIO =====
package "‚öôÔ∏è **CAPA DE L√ìGICA DE NEGOCIO**" as BusinessLayer {
    component "Controlador Principal" as Controller <<Main Controller>> {
        [Procesamiento IR]
        [Validaci√≥n C√≥digos]
        [Orquestaci√≥n Sistema]
    }
    
    component "Gestor de C√≥digos IR" as CodeManager <<Business Logic>> {
        [Interpretaci√≥n C√≥digos]
        [Mapeo de Acciones]
        [Validaci√≥n Entrada]
    }
    
    component "Coordinador GUI" as GUICoordinator <<Presenter>> {
        [Actualizaci√≥n Vistas]
        [Manejo Estados]
        [Comunicaci√≥n Componentes]
    }
    
    note right of Controller : "**Controlador (Controller)**\n‚Ä¢ L√≥gica de negocio central\n‚Ä¢ Coordinaci√≥n entre capas\n‚Ä¢ Procesamiento de comandos"
}

' ===== CAPA DE SERVICIOS =====
package "üîß **CAPA DE SERVICIOS**" as ServiceLayer {
    component "Servicio Serial" as SerialService <<Hardware Service>> {
        [Gesti√≥n Puerto COM]
        [Lectura Datos]
        [Manejo Conexiones]
    }
    
    component "Servicio de Persistencia" as PersistenceService <<Data Service>> {
        [Operaciones CRUD]
        [Gesti√≥n Transacciones]
        [Logging Actividad]
    }
    
    component "Servicio de Configuraci√≥n" as ConfigService <<Configuration Service>> {
        [Par√°metros Sistema]
        [Configuraci√≥n Puerto]
        [Preferencias Usuario]
    }
    
    note right of SerialService : "**Servicios de Infraestructura**\n‚Ä¢ Abstracci√≥n hardware\n‚Ä¢ Servicios transversales\n‚Ä¢ Comunicaci√≥n externa"
}

' ===== CAPA DE ACCESO A DATOS =====
package "üíæ **CAPA DE ACCESO A DATOS**" as DataLayer {
    component "ArduinoDataDAO" as DAO <<Data Access Object>> {
        [Patr√≥n DAO]
        [Operaciones BD]
        [Mapeo Objetos]
    }
    
    component "DatabaseInitializer" as DBInit <<Database Setup>> {
        [Inicializaci√≥n Esquema]
        [Migraci√≥n Datos]
        [Validaci√≥n Estructura]
    }
    
    component "Connection Pool" as ConnPool <<Connection Management>> {
        [Gesti√≥n Conexiones]
        [Pool de Conexiones]
        [Optimizaci√≥n Recursos]
    }
    
    note right of DAO : "**Modelo (Model)**\n‚Ä¢ Acceso a datos\n‚Ä¢ Persistencia\n‚Ä¢ Integridad de datos"
}

' ===== RECURSOS EXTERNOS =====
cloud "üåê **RECURSOS EXTERNOS**" as ExternalResources {
    component "Arduino Hardware" as Arduino <<Hardware Device>> {
        [Sensor IR]
        [Microcontrolador]
        [Puerto Serial]
    }
    
    component "jSerialComm Library" as SerialLib <<External Library>> {
        [Comunicaci√≥n Serial]
        [Detecci√≥n Puertos]
        [API Nativa]
    }
    
    component "Swing Framework" as SwingFW <<UI Framework>> {
        [Componentes GUI]
        [Event Handling]
        [Look & Feel]
    }
}

' ===== BASE DE DATOS =====
database "üìä **BASE DE DATOS**" as Database {
    component "SQLite DB" as SQLiteDB <<File Database>> {
        [datos_arduino.db]
        [Tabla: registros_arduino]
        [√çndices y Constraints]
    }
}

' ===== CONFIGURACI√ìN DEL SISTEMA =====
package "‚öôÔ∏è **CONFIGURACI√ìN**" as Configuration {
    component "Archivos de Configuraci√≥n" as ConfigFiles <<Configuration>> {
        [Par√°metros Puerto: COM4]
        [Velocidad: 9600 baud]
        [Timeout Conexi√≥n]
        [C√≥digos IR Mapping]
    }
    
    component "Recursos Visuales" as Resources <<Static Resources>> {
        [logo.png]
        [Colores y Temas]
        [Fonts y Estilos]
    }
}

' ===== FLUJO DE DATOS PRINCIPALES =====

' Flujo de entrada de datos IR
Arduino --> SerialService : "Env√≠o c√≥digo IR\n(0x7, 0x15, etc.)"
SerialService --> Controller : "Datos seriales\nprocesados"
Controller --> CodeManager : "C√≥digo IR\npara interpretaci√≥n"
CodeManager --> GUICoordinator : "Acci√≥n\nmapeada"
GUICoordinator --> GUI2 : "Actualizaci√≥n\ndisplay"

' Flujo de persistencia
Controller --> PersistenceService : "Guardar\nc√≥digo recibido"
PersistenceService --> DAO : "Operaci√≥n\nCRUD"
DAO --> SQLiteDB : "INSERT/SELECT\nSQL"

' Flujo de interfaz de usuario
GUI1 --> GUICoordinator : "Eventos UI\n(clicks, acciones)"
GUICoordinator --> Controller : "Comandos\nsistema"
Controller --> GUI1 : "Actualizaci√≥n\nestado"

' Inicializaci√≥n del sistema
DBInit --> SQLiteDB : "Crear esquema\ninicializaci√≥n"
ConfigService --> ConfigFiles : "Cargar\nconfiguraci√≥n"

' Dependencias de librer√≠as externas
SerialService --> SerialLib : "API Serial"
GUI1 --> SwingFW : "Componentes UI"
GUI2 --> SwingFW : "Renderizado"
GUI3 --> SwingFW : "Di√°logos"
DAO --> SQLiteDB : "JDBC Connection"

' ===== PATRONES ARQUITECT√ìNICOS =====
note top of PresentationLayer : "**PATR√ìN MVC**\n‚Ä¢ Vista: Componentes Swing\n‚Ä¢ Controlador: arduinoc\n‚Ä¢ Modelo: ArduinoDataDAO"

note bottom of BusinessLayer : "**PATR√ìN FACADE**\n‚Ä¢ Controller act√∫a como fachada\n‚Ä¢ Simplifica acceso a servicios\n‚Ä¢ Coordina operaciones complejas"

note left of ServiceLayer : "**PATR√ìN SERVICE LAYER**\n‚Ä¢ Abstrae l√≥gica de negocio\n‚Ä¢ Servicios reutilizables\n‚Ä¢ Separaci√≥n de responsabilidades"

note right of DataLayer : "**PATR√ìN DAO**\n‚Ä¢ Abstrae acceso a datos\n‚Ä¢ Independencia de BD\n‚Ä¢ Operaciones CRUD centralizadas"

' ===== CARACTER√çSTICAS ARQUITECT√ìNICAS =====
legend top right
  **Caracter√≠sticas de la Arquitectura:**
  
  **üîÑ Separaci√≥n de Responsabilidades**
  ‚Ä¢ Cada capa tiene responsabilidad espec√≠fica
  ‚Ä¢ Bajo acoplamiento entre componentes
  
  **üìà Escalabilidad**
  ‚Ä¢ Arquitectura por capas facilita extensi√≥n
  ‚Ä¢ Servicios independientes y reutilizables
  
  **üîß Mantenibilidad**
  ‚Ä¢ C√≥digo organizado por funcionalidad
  ‚Ä¢ Patrones de dise√±o bien definidos
  
  **üõ°Ô∏è Robustez**
  ‚Ä¢ Manejo de errores por capa
  ‚Ä¢ Validaci√≥n en m√∫ltiples niveles
  
  **‚ö° Performance**
  ‚Ä¢ Pool de conexiones para BD
  ‚Ä¢ Procesamiento as√≠ncrono de datos seriales
end legend

@enduml
